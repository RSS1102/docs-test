import{_ as s,o as n,c as a,R as e}from"./chunks/framework.4ef3c166.js";const b=JSON.parse('{"title":"vite-plugin-electron-renderer","description":"","frontmatter":{},"headers":[],"relativePath":"plugin/vite-plugin-electron-renderer.md","filePath":"plugin/vite-plugin-electron-renderer.md"}'),l={name:"plugin/vite-plugin-electron-renderer.md"},p=e(`<h1 id="vite-plugin-electron-renderer" tabindex="-1">vite-plugin-electron-renderer <a class="header-anchor" href="#vite-plugin-electron-renderer" aria-label="Permalink to &quot;vite-plugin-electron-renderer&quot;">​</a></h1><hr><p>Using node.js in the rendering process.</p><h2 id="install" tabindex="-1">Install <a class="header-anchor" href="#install" aria-label="Permalink to &quot;Install&quot;">​</a></h2><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">vite-plugin-electron-renderer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><ol><li>This just modifies some of Vite&#39;s default config to make the Renderer process works.</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> renderer </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vite-plugin-electron-renderer</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">renderer</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="2"><li>Using the third-part C/C++ package in the Renderer process.</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> renderer </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vite-plugin-electron-renderer</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">renderer</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">resolve</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">serialport</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">platform</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">node</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// specify as \`node\` platform</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="api-define" tabindex="-1">API <em>(Define)</em> <a class="header-anchor" href="#api-define" aria-label="Permalink to &quot;API *(Define)*&quot;">​</a></h2><p><code>renderer(options: RendererOptions)</code></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RendererOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * Explicitly tell Vite how to load modules, which is very useful for C/C++ modules.  </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * Most of the time, you don&#39;t need to use it when a module is a C/C++ module, you can load them by return \`{ platform: &#39;node&#39; }\`.  </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * If you know exactly how Vite works, you can customize the return snippets.  </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * \`\`\`js</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * renderer({</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   *   resolve: {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   *     // Use the serialport(C/C++) module as an example</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   *     serialport: () =&gt; ({ platform: &#39;node&#39; }),</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   *     // Equivalent to</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   *     serialport: () =&gt; \`const lib = require(&quot;serialport&quot;); export default lib.default || lib;\`,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   *   },</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * })</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * \`\`\`</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">experimental</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">resolve</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    [</span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">platform</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">browser</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">node</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">platform</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">browser</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">node</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><ul><li><a href="https://github.com/electron-vite/vite-plugin-electron-renderer/tree/main/examples/quick-start" target="_blank" rel="noreferrer">quick-start</a></li></ul><h2 id="how-to-work" tabindex="-1">How to work <a class="header-anchor" href="#how-to-work" aria-label="Permalink to &quot;How to work&quot;">​</a></h2><blockquote><p>Load Electron and Node.js cjs-packages/builtin-modules (Schematic)</p></blockquote><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">┏————————————————————————————————————————┓                 ┏—————————————————┓</span></span>
<span class="line"><span style="color:#A6ACCD;"> │ import { ipcRenderer } from &#39;electron&#39; │                 │ Vite dev server │</span></span>
<span class="line"><span style="color:#A6ACCD;"> ┗————————————————————————————————————————┛                 ┗—————————————————┛</span></span>
<span class="line"><span style="color:#A6ACCD;">                 │                                                   │</span></span>
<span class="line"><span style="color:#A6ACCD;">                 │ 1. Pre-Bundling electron module into              │</span></span>
<span class="line"><span style="color:#A6ACCD;">                 │    node_modules/.vite-electron-renderer/electron  │</span></span>
<span class="line"><span style="color:#A6ACCD;">                 │                                                   │</span></span>
<span class="line"><span style="color:#A6ACCD;">                 │ 2. HTTP(Request): electron module                 │</span></span>
<span class="line"><span style="color:#A6ACCD;">                 │ ————————————————————————————————————————————————&gt; │</span></span>
<span class="line"><span style="color:#A6ACCD;">                 │                                                   │</span></span>
<span class="line"><span style="color:#A6ACCD;">                 │ 3. Alias redirects to                             │</span></span>
<span class="line"><span style="color:#A6ACCD;">                 │    node_modules/.vite-electron-renderer/electron  │</span></span>
<span class="line"><span style="color:#A6ACCD;">                 │    ↓                                              │</span></span>
<span class="line"><span style="color:#A6ACCD;">                 │    const { ipcRenderer } = require(&#39;electron&#39;)    │</span></span>
<span class="line"><span style="color:#A6ACCD;">                 │    export { ipcRenderer }                         │</span></span>
<span class="line"><span style="color:#A6ACCD;">                 │                                                   │</span></span>
<span class="line"><span style="color:#A6ACCD;">                 │ 4. HTTP(Response): electron module                │</span></span>
<span class="line"><span style="color:#A6ACCD;">                 │ &lt;———————————————————————————————————————————————— │</span></span>
<span class="line"><span style="color:#A6ACCD;">                 │                                                   │</span></span>
<span class="line"><span style="color:#A6ACCD;"> ┏————————————————————————————————————————┓                 ┏—————————————————┓</span></span>
<span class="line"><span style="color:#A6ACCD;"> │ import { ipcRenderer } from &#39;electron&#39; │                 │ Vite dev server │</span></span>
<span class="line"><span style="color:#A6ACCD;"> ┗————————————————————————————————————————┛                 ┗—————————————————┛</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="dependencies-vs-devdependencies" tabindex="-1"><code>dependencies</code> vs <code>devDependencies</code> <a class="header-anchor" href="#dependencies-vs-devdependencies" aria-label="Permalink to &quot;\`dependencies\` vs \`devDependencies\`&quot;">​</a></h2><table><thead><th>Classify</th><th>e.g.</th><th>dependencies</th><th>devDependencies</th></thead><tbody><tr><td>Node.js C/C++ native modules</td><td>serialport, sqlite3</td><td>✅</td><td>❌</td></tr><tr><td>Node.js CJS packages</td><td>electron-store</td><td>✅</td><td>✅</td></tr><tr><td>Node.js ESM packages</td><td>execa, got, node-fetch</td><td>✅</td><td>✅ (Recommend)</td></tr><tr><td>Web packages</td><td>Vue, React</td><td>✅</td><td>✅ (Recommend)</td></tr></tbody></table><h4 id="why-is-it-recommended-to-put-properly-buildable-packages-in-devdependencies" tabindex="-1">Why is it recommended to put properly buildable packages in <code>devDependencies</code>? <a class="header-anchor" href="#why-is-it-recommended-to-put-properly-buildable-packages-in-devdependencies" aria-label="Permalink to &quot;Why is it recommended to put properly buildable packages in \`devDependencies\`?&quot;">​</a></h4><p>Doing so will reduce the size of the packaged APP by <a href="https://github.com/electron-userland/electron-builder" target="_blank" rel="noreferrer">electron-builder</a>.</p>`,22),o=[p];function r(t,c,i,y,d,D){return n(),a("div",null,o)}const u=s(l,[["render",r]]);export{b as __pageData,u as default};
